package main


import (
	"log"
	"net/http"
	//"time"

	"github.com/gin-gonic/gin"
	"github.com/szuecs/gin-gomonitor"
	"github.com/szuecs/gin-gomonitor/aspects"
	"gopkg.in/mcuadros/go-monitor.v1/aspects"
	//"time"
	"time"
)

func main2() {
	router := gin.New()

	// initialize CounterAspect and reset every minute
	counterAspect := ginmon.NewCounterAspect()
	counterAspect.StartTimer(5 * time.Second)



	// register CounterAspect middleware
	// test: curl http://localhost:9000/Counter


	// initialize RequestTimeAspect and calculate every 5 seconds
	requestAspect1 := ginmon.NewRequestTimeAspect()
	requestAspect1.StartTimer(5 * time.Second)
	asps := []aspects.Aspect{counterAspect,requestAspect1}

	router.Use(ginmon.CounterHandler(counterAspect))
	router.Use(ginmon.RequestTimeHandler(requestAspect1))

	// start metrics endpoint
	gomonitor.Start(9000, asps)
	// last middleware
	router.Use(gin.Recovery())

	router.GET("/API1", func(ctx *gin.Context) {
		ctx.JSON(http.StatusOK, gin.H{ "hello": "world API1"})
	})

	router.GET("/API2", func(ctx *gin.Context) {
		ctx.JSON(http.StatusOK, gin.H{ "hello": "world API2"})
	})

	router.GET("/API3", func(ctx *gin.Context) {
		ctx.JSON(http.StatusOK, gin.H{ "hello": "world API3"})
	})

	log.Fatal(router.Run(":8080"))
}